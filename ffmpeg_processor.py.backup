"""
FFmpeg processing utilities for audio/video extraction and subtitle handling
"""
import os
import subprocess
import uuid
import logging
import shutil
from typing import Dict, List, Optional, Tuple, Union
from pathlib import Path
from enum import Enum

class FFmpegError(Exception):
    """Custom exception for FFmpeg operations"""
    pass

class ProcessingStatus(Enum):
    """Processing status enumeration"""
    SUCCESS = "success"
    TIMEOUT = "timeout"
    FILE_NOT_FOUND = "file_not_found"
    PERMISSION_ERROR = "permission_error"
    FFMPEG_ERROR = "ffmpeg_error"
    UNKNOWN_ERROR = "unknown_error"

logger = logging.getLogger(__name__)

class FFmpegProcessor:
    """Centralized FFmpeg operations processor"""
    
    def __init__(self, fonts_dir: str = "fonts"):
        self.fonts_dir = fonts_dir
        self.default_timeout = 120  # seconds
        self.chapter_timeout = 900  # seconds for longer operations
        self._validate_environment()
    
    def _validate_environment(self):
        """Validate FFmpeg installation and environment"""
        if not shutil.which('ffmpeg'):
            raise FFmpegError("FFmpeg not found in system PATH")
        
        # Test FFmpeg installation
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                raise FFmpegError("FFmpeg installation appears to be corrupted")
            logger.info("FFmpeg validation successful")
        except subprocess.TimeoutExpired:
            raise FFmpegError("FFmpeg validation timeout")
        except Exception as e:
            raise FFmpegError(f"FFmpeg validation failed: {e}")
    
    def _validate_input_file(self, input_file: str) -> None:
        """Validate input file exists and is readable"""
        if not os.path.exists(input_file):
            raise FFmpegError(f"Input file not found: {input_file}")
        if not os.access(input_file, os.R_OK):
            raise FFmpegError(f"Input file not readable: {input_file}")
        if os.path.getsize(input_file) == 0:
            raise FFmpegError(f"Input file is empty: {input_file}")
    
    def _validate_output_path(self, output_file: str) -> None:
        """Validate output directory is writable"""
        output_dir = os.path.dirname(output_file)
        if output_dir and not os.path.exists(output_dir):
            try:
                os.makedirs(output_dir, exist_ok=True)
            except Exception as e:
                raise FFmpegError(f"Cannot create output directory: {e}")
        
        if output_dir and not os.access(output_dir, os.W_OK):
            raise FFmpegError(f"Output directory not writable: {output_dir}")
    
    def _calculate_timeout(self, duration: float) -> int:
        """Calculate appropriate timeout based on content duration"""
        # Base timeout + extra time based on duration
        base_timeout = self.default_timeout
        duration_factor = max(1.0, duration / 60.0)  # At least 1x, more for longer content
        return int(base_timeout * duration_factor * 1.5)  # 50% buffer
    
    def extract_audio_segment(self, input_file: str, output_file: str, 
                            start_time: float, duration: float, 
                            volume: float = 3.0, timeout: int = None) -> bool:
        """Extract audio segment from media file with comprehensive error handling"""
        try:
            # Validate inputs
            self._validate_input_file(input_file)
            self._validate_output_path(output_file)
            
            # Validate parameters
            if start_time < 0 or duration <= 0:
                raise FFmpegError(f"Invalid time parameters: start={start_time}, duration={duration}")
            if not 0.1 <= volume <= 10.0:
                logger.warning(f"Volume {volume} outside recommended range [0.1, 10.0]")
            
            # Calculate appropriate timeout
            actual_timeout = timeout or self._calculate_timeout(duration)
            
            cmd = [
                'ffmpeg',
                '-ss', str(start_time),
                '-i', input_file,
                '-t', str(duration),
                '-af', f'volume={volume}',
                '-c:a', 'mp3',
                '-b:a', '128k',
                '-avoid_negative_ts', 'make_zero',  # Handle negative timestamps
                '-y',
                output_file
            ]
            
            logger.debug(f"Executing FFmpeg command: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=actual_timeout
            )
            
            if result.returncode == 0:
                # Verify output file was created and has content
                if not os.path.exists(output_file) or os.path.getsize(output_file) == 0:
                    raise FFmpegError("Output file was not created or is empty")
                logger.info(f"Audio segment extracted successfully: {output_file}")
                return True
            else:
                error_msg = result.stderr.strip() if result.stderr else "Unknown FFmpeg error"
                logger.error(f"FFmpeg failed with return code {result.returncode}: {error_msg}")
                raise FFmpegError(f"FFmpeg processing failed: {error_msg}")
                
        except subprocess.TimeoutExpired:
            error_msg = f"FFmpeg timeout ({actual_timeout}s) extracting audio segment"
            logger.error(error_msg)
            # Clean up partial output file
            if os.path.exists(output_file):
                try:
                    os.remove(output_file)
                except Exception:
                    pass
            raise FFmpegError(error_msg)
        except FFmpegError:
            raise
        except FileNotFoundError:
            raise FFmpegError(f"Input file not found: {input_file}")
        except PermissionError as e:
            raise FFmpegError(f"Permission error: {e}")
        except Exception as e:
            logger.error(f"Unexpected error extracting audio segment: {e}")
            raise FFmpegError(f"Unexpected error: {e}")
        
        return False
    
    def extract_video_segment(self, input_file: str, output_file: str,
                            start_time: float, duration: float,
                            subtitle_file: Optional[str] = None,
                            volume: float = 3.0, timeout: int = None) -> bool:
        """Extract video segment with optional subtitles"""
        try:
            cmd = [
                'ffmpeg',
                '-ss', str(start_time),
                '-i', input_file,
                '-t', str(duration)
            ]
            
            # Add subtitle filter if provided
            if subtitle_file:
                cmd.extend(['-vf', f"subtitles={subtitle_file}:fontsdir={self.fonts_dir}"])
            
            cmd.extend([
                '-af', f'volume={volume}',
                '-c:v', 'libx264',
                '-preset', 'fast',
                '-crf', '23',
                '-pix_fmt', 'yuv420p',
                '-c:a', 'aac',
                '-b:a', '128k',
                '-y',
                output_file
            ])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=timeout or self.default_timeout
            )
            
            if result.returncode == 0:
                logger.info(f"Video segment extracted: {output_file}")
                return True
            else:
                logger.error(f"FFmpeg error: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"FFmpeg timeout extracting video segment")
            return False
        except Exception as e:
            logger.error(f"Error extracting video segment: {e}")
            return False
    
    def create_video_from_audio(self, audio_file: str, output_file: str,
                              start_time: float, duration: float,
                              subtitle_file: Optional[str] = None,
                              volume: float = 3.0, timeout: int = None) -> bool:
        """Create video with black background from audio file"""
        try:
            cmd = [
                'ffmpeg',
                '-f', 'lavfi',
                '-i', f'color=black:size=1920x1080:duration={duration}:rate=30',
                '-ss', str(start_time),
                '-i', audio_file,
                '-t', str(duration)
            ]
            
            if subtitle_file:
                cmd.extend([
                    '-filter_complex',
                    f"[0:v]subtitles={subtitle_file}:fontsdir={self.fonts_dir}[v]",
                    '-map', '[v]',
                    '-map', '1:a'
                ])
            else:
                cmd.extend(['-map', '0:v', '-map', '1:a'])
            
            cmd.extend([
                '-af', f'volume={volume}',
                '-c:v', 'libx264',
                '-preset', 'fast',
                '-crf', '23',
                '-pix_fmt', 'yuv420p',
                '-c:a', 'aac',
                '-b:a', '128k',
                '-shortest',
                '-y',
                output_file
            ])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=timeout or self.default_timeout
            )
            
            if result.returncode == 0:
                logger.info(f"Video from audio created: {output_file}")
                return True
            else:
                logger.error(f"FFmpeg error: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"FFmpeg timeout creating video from audio")
            return False
        except Exception as e:
            logger.error(f"Error creating video from audio: {e}")
            return False
    
    def extract_audio_from_video(self, video_file: str, audio_file: str) -> bool:
        """Extract audio track from video file"""
        try:
            cmd = [
                'ffmpeg',
                '-i', video_file,
                '-vn',  # No video
                '-acodec', 'mp3',
                '-ab', '128k',
                '-ar', '44100',
                '-y',
                audio_file
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=self.default_timeout
            )
            
            if result.returncode == 0:
                logger.info(f"Audio extracted from video: {audio_file}")
                return True
            else:
                logger.error(f"FFmpeg error extracting audio: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"FFmpeg timeout extracting audio from video")
            return False
        except Exception as e:
            logger.error(f"Error extracting audio from video: {e}")
            return False
    
    def get_media_duration(self, media_file: str) -> Optional[float]:
        """Get duration of media file"""
        try:
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                media_file
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                import json
                data = json.loads(result.stdout)
                return float(data['format']['duration'])
            else:
                logger.error(f"FFprobe error: {result.stderr}")
                return None
                
        except Exception as e:
            logger.error(f"Error getting media duration: {e}")
            return None

class SubtitleProcessor:
    """Handles subtitle file creation and management"""
    
    @staticmethod
    def clean_subtitle_text(text):
        """Clean subtitle text by removing unwanted elements"""
        import re
        
        if not text:
            return ""
        
        # Remove music/songs (♪ or ♫)
        text = re.sub(r'♪[^♪]*♪', '', text)
        text = re.sub(r'♫[^♫]*♫', '', text)
        text = re.sub(r'[♪♫]', '', text)
        
        # Remove sound effects and descriptions
        text = re.sub(r'\([^)]*\)', '', text)  # (sound effects)
        text = re.sub(r'\[[^\]]*\]', '', text)  # [descriptions]
        text = re.sub(r'\{[^}]*\}', '', text)   # {actions}
        
        # Remove speaker names
        text = re.sub(r'^[A-Z][A-Z\s]*:', '', text)  # ALL CAPS speaker names
        text = re.sub(r'^[A-Z][a-z]+:', '', text)    # Title case speaker names
        text = re.sub(r'\b[A-Z]+:', '', text)        # Any caps word followed by colon
        
        # Remove subtitle/release info patterns
        text = re.sub(r'.*Sub Upload Date.*', '', text, flags=re.IGNORECASE)
        text = re.sub(r'.*www\..*', '', text, flags=re.IGNORECASE)
        text = re.sub(r'.*\.com.*', '', text, flags=re.IGNORECASE)
        text = re.sub(r'.*addic7ed.*', '', text, flags=re.IGNORECASE)
        
        # Remove dialogue hyphens
        text = re.sub(r'^-\s*[A-Z]+:\s*', '', text)
        text = re.sub(r'\s*-\s*[A-Z]+:\s*', '. ', text)
        text = re.sub(r'^-\s*', '', text)
        text = re.sub(r'\s*-\s*', '. ', text)
        
        # Clean up spaces
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text if len(text) >= 3 else ""
    
    @staticmethod
    def parse_srt_time(time_str):
        """Parse SRT time format to seconds"""
        # Format: 00:01:11,518
        time_parts = time_str.replace(',', '.').split(':')
        hours = int(time_parts[0])
        minutes = int(time_parts[1])
        seconds = float(time_parts[2])
        return hours * 3600 + minutes * 60 + seconds
    
    @staticmethod
    def parse_srt_file(file_path):
        """Parse SRT file and return list of cleaned sentences"""
        import re
        
        sentences = []
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read().strip()
        
        # Split by double newlines to get subtitle blocks
        blocks = re.split(r'\n\s*\n', content)
        
        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) >= 3:
                # Skip subtitle number (first line)
                time_line = lines[1]
                text_lines = lines[2:]
                
                # Parse time range
                if ' --> ' in time_line:
                    start_time_str, end_time_str = time_line.split(' --> ')
                    start_time = SubtitleProcessor.parse_srt_time(start_time_str.strip())
                    end_time = SubtitleProcessor.parse_srt_time(end_time_str.strip())
                    
                    # Join and clean text lines
                    text = ' '.join(text_lines).strip()
                    cleaned_text = SubtitleProcessor.clean_subtitle_text(text)
                    
                    if cleaned_text:
                        sentences.append({
                            'english': cleaned_text,
                            'startTime': start_time,
                            'endTime': end_time
                        })
        
        return sentences
    
    @staticmethod
    def wrap_text(text: str, max_chars_per_line: int = 40, max_lines: int = 12, for_ass: bool = False) -> str:
        """Wrap text for subtitles"""
        import textwrap
        
        if not text:
            return ""
        
        # Split by existing line breaks first
        paragraphs = text.split('\n')
        wrapped_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip():
                wrapped_paragraphs.append('')
                continue
            
            # Wrap each paragraph
            wrapped_lines = textwrap.wrap(
                paragraph, 
                width=max_chars_per_line,
                break_long_words=False,
                break_on_hyphens=False
            )
            wrapped_paragraphs.extend(wrapped_lines)
        
        # Limit total lines
        if len(wrapped_paragraphs) > max_lines:
            wrapped_paragraphs = wrapped_paragraphs[:max_lines]
        
        # Join with appropriate line break character
        line_break = '\\N' if for_ass else '\n'
        return line_break.join(wrapped_paragraphs)
    
    @staticmethod
    def create_ass_subtitle_file(english_text: Optional[str], korean_text: Optional[str], 
                               duration: float, output_path: str, 
                               english_font_size: int = 32, korean_font_size: int = 24,
                               include_commentary: bool = False, commentary_style: str = 'orange') -> str:
        """Create ASS format subtitle file with English and Korean support"""
        
        def seconds_to_ass_time(seconds: float) -> str:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            secs = seconds % 60
            return f"{hours}:{minutes:02d}:{secs:05.2f}"
        
        # Calculate English marginV based on font size
        def get_english_margin_v(font_size):
            if font_size == 24:
                return 50
            elif font_size == 32:
                return 60
            elif font_size == 48:
                return 100
            else:
                # Fallback for other sizes
                return 60
        
        english_margin_v = get_english_margin_v(english_font_size)
        korean_margin_v = 30  # 한글은 고정값 유지
        
        # TOEIC 표현 해설 생성
        def find_toeic_expressions(text):
            """영어 텍스트에서 TOEIC 표현을 찾아 한글 해설 반환"""
            if not text or not include_commentary:
                return ""
            
            import json
            import re
            import os
            
            try:
                # TOEIC 표현 데이터 로드
                json_path = '/home/kang/dev/english/static/data/toeic_expressions.json'
                if not os.path.exists(json_path):
                    return ""
                    
                with open(json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    expressions = data.get('expressions', {})
                
                found_expressions = []
                text_lower = text.lower()
                
                for expr, meaning in expressions.items():
                    # 기본형 매칭
                    if expr.lower() in text_lower:
                        found_expressions.append((expr, meaning))
                        continue
                    
                    # 과거형/진행형/부정형 매칭을 위한 확장 검색
                    base_verbs = expr.split()
                    if len(base_verbs) >= 2:
                        first_word = base_verbs[0]
                        rest_words = ' '.join(base_verbs[1:])
                        
                        # 과거형 변형 (adjust → adjusted, apply → applied)
                        past_forms = [
                            f"{first_word}ed {rest_words}",
                            f"{first_word}d {rest_words}",
                            f"{first_word}ied {rest_words}"  # apply → applied
                        ]
                        
                        # 진행형 변형 (adjust → adjusting)
                        ing_forms = [
                            f"{first_word}ing {rest_words}",
                            f"{first_word[:-1]}ing {rest_words}"  # come → coming
                        ]
                        
                        # 부정형 변형
                        negative_forms = [
                            f"don't {expr}",
                            f"doesn't {expr}", 
                            f"didn't {expr}",
                            f"not {expr}"
                        ]
                        
                        # 모든 변형 검사
                        all_forms = past_forms + ing_forms + negative_forms
                        for form in all_forms:
                            if form.lower() in text_lower:
                                found_expressions.append((expr, meaning))
                                break
                
                # 중복 제거 
                unique_expressions = list(set(found_expressions))
                
                # 색상이 적용된 형식으로 변환
                if not unique_expressions:
                    return ""
                
                # 스타일 색상 가져오기
                style_colors = {
                    'orange': {'english': '80FF', 'korean': 'CCFF'},
                    'yellow': {'english': 'FFFF', 'korean': 'FFFF80'},
                    'cyan': {'english': 'FF8800', 'korean': 'FFAA00'}
                }
                colors = style_colors.get(commentary_style, style_colors['orange'])
                
                formatted_expressions = []
                for expr, meaning in unique_expressions[:2]:  # 최대 2개
                    # ASS 색상 태그 사용: {\c&Hcolor&}text{\r}
                    formatted = f"{{\\c&H{colors['english']}&}}{expr}{{\\r}}\\N{{\\c&H{colors['korean']}&}}: {meaning}{{\\r}}"
                    formatted_expressions.append(formatted)
                
                return "\\N".join(formatted_expressions)
                
            except Exception as e:
                return ""
        
        commentary_text = find_toeic_expressions(english_text) if english_text else ""
        
        # ASS header with configurable font sizes and margins
        commentary_ass_style = ""
        if commentary_text:
            # 해설 스타일별 색상 정의 (BGR 포맷)
            style_colors = {
                'orange': {
                    'english': '&H0080FF',  # 밝은 주황색 (영어)
                    'korean': '&H00CCFF'   # 연한 주황색 (한글)
                },
                'yellow': {
                    'english': '&H00FFFF',  # 노란색 (영어)
                    'korean': '&H80FFFF'   # 연한 노랑 (한글)
                },
                'cyan': {
                    'english': '&HFF8800',  # 청록색 (영어)
                    'korean': '&HFFAA00'   # 연한 청록 (한글)
                }
            }
            
            colors = style_colors.get(commentary_style, style_colors['orange'])
            # Commentary: 28pt 고정, 상단 우측 정렬, 굵게, 검은 테두리
            # Alignment: 9 = 상단 우측, MarginV: 20 (상단 여백), MarginR: 30 (우측 여백)
            commentary_ass_style = f"Style: Commentary,Noto Sans KR,28,{colors['english']},{colors['english']},&H000000,&H80000000,1,0,0,0,100,100,0,0,1,2,1,9,20,30,20,1\n"
        
        if english_text and korean_text:
            ass_content = f"""[Script Info]
Title: Subtitle
ScriptType: v4.00+
WrapStyle: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: English,Noto Sans KR,{english_font_size},&Hffffff,&Hffffff,&H0,&H80000000,1,0,0,0,100,100,0,0,1,2,0,2,5,5,{english_margin_v},1
Style: Korean,Noto Sans KR,{korean_font_size},&Hffffff,&Hffffff,&H0,&H80000000,0,0,0,0,100,100,0,0,1,2,0,2,5,5,{korean_margin_v},1
{commentary_ass_style}
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
        elif korean_text:
            ass_content = f"""[Script Info]
Title: Subtitle
ScriptType: v4.00+
WrapStyle: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Korean,Noto Sans KR,{korean_font_size},&Hffffff,&Hffffff,&H0,&H80000000,0,0,0,0,100,100,0,0,1,2,0,2,5,5,50,1
{commentary_ass_style}
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
        elif english_text:
            ass_content = f"""[Script Info]
Title: Subtitle
ScriptType: v4.00+
WrapStyle: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: English,Noto Sans KR,{english_font_size},&Hffffff,&Hffffff,&H0,&H80000000,1,0,0,0,100,100,0,0,1,2,0,2,5,5,{english_margin_v},1
{commentary_ass_style}
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
        
        start_time = "0:00:00.00"
        end_time = seconds_to_ass_time(duration)
        
        # Add commentary dialogue first (top position)
        if commentary_text:
            ass_content += f"Dialogue: 0,{start_time},{end_time},Commentary,,0,0,0,,{commentary_text}\n"
        
        # Add main dialogue lines based on available text
        if english_text and korean_text:
            ass_content += f"Dialogue: 1,{start_time},{end_time},English,,0,0,0,,{english_text}\n"
            ass_content += f"Dialogue: 2,{start_time},{end_time},Korean,,0,0,0,,{korean_text}\n"
        elif english_text:
            ass_content += f"Dialogue: 1,{start_time},{end_time},English,,0,0,0,,{english_text}\n"
        elif korean_text:
            ass_content += f"Dialogue: 1,{start_time},{end_time},Korean,,0,0,0,,{korean_text}\n"
        
        # Write file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(ass_content)
        
        return output_path
    
    @staticmethod
    def create_srt_subtitle_file(text: str, duration: float, output_path: str) -> str:
        """Create SRT format subtitle file"""
        wrapped_text = SubtitleProcessor.wrap_text(text, max_chars_per_line=40)
        
        duration_formatted = f"{int(duration//3600):02d}:{int((duration%3600)//60):02d}:{duration%60:06.3f}"
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(f"1\n00:00:00,000 --> {duration_formatted}\n{wrapped_text}\n\n")
        
        return output_path

class MediaExtractor:
    """High-level media extraction operations"""
    
    def __init__(self, ffmpeg_processor: FFmpegProcessor, subtitle_processor: SubtitleProcessor):
        self.ffmpeg = ffmpeg_processor
        self.subtitle = subtitle_processor
    
    def extract_sentence_with_subtitles(self, input_file: str, output_file: str,
                                      sentence_data: Dict, subtitle_options: Dict,
                                      is_video_file: bool = True) -> bool:
        """Extract single sentence with subtitle options"""
        start_time = sentence_data['startTime']
        end_time = sentence_data['endTime'] 
        duration = end_time - start_time + 0.5  # 0.5초 정지 추가
        
        # Create subtitle file if needed
        subtitle_file = None
        if any(subtitle_options.values()):
            subtitle_file = self._create_subtitle_file(sentence_data, duration, subtitle_options)
        
        try:
            # Extract based on file type
            logger.info(f"Extracting: is_video_file={is_video_file}, input_file={input_file}")
            if is_video_file:
                logger.info("Using extract_video_segment")
                success = self.ffmpeg.extract_video_segment(
                    input_file, output_file, start_time, duration, subtitle_file
                )
            else:
                logger.info("Using create_video_from_audio")
                success = self.ffmpeg.create_video_from_audio(
                    input_file, output_file, start_time, duration, subtitle_file
                )
            
            return success
            
        finally:
            # Clean up subtitle file
            if subtitle_file and os.path.exists(subtitle_file):
                try:
                    os.remove(subtitle_file)
                except Exception as e:
                    logger.warning(f"Failed to remove subtitle file {subtitle_file}: {e}")
    
    def _create_subtitle_file(self, sentence_data: Dict, duration: float, 
                            subtitle_options: Dict) -> Optional[str]:
        """Create appropriate subtitle file based on options"""
        # 디버깅 로그 추가
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"_create_subtitle_file 호출됨")
        logger.info(f"subtitle_options: {subtitle_options}")
        logger.info(f"sentence_data keys: {list(sentence_data.keys())}")
        logger.info(f"sentence_data['korean']: {sentence_data.get('korean', 'None')}")
        
        english_text = sentence_data.get('english') if subtitle_options.get('english') else None
        korean_text = sentence_data.get('korean') if subtitle_options.get('korean') else None
        
        logger.info(f"english_text: {english_text}")
        logger.info(f"korean_text: {korean_text}")
        
        
        if not english_text and not korean_text:
            return None
        
        # Generate unique filename
        subtitle_filename = f'temp_subtitle_{uuid.uuid4().hex}.ass'
        subtitle_path = os.path.join(os.path.dirname(sentence_data.get('output_dir', '.')), subtitle_filename)
        
        # Get font sizes and commentary option from options
        english_font_size = subtitle_options.get('english_font_size', 32)
        korean_font_size = subtitle_options.get('korean_font_size', 24)
        include_commentary = subtitle_options.get('include_commentary', False)
        commentary_style = subtitle_options.get('commentary_style', 'orange')
        
        return self.subtitle.create_ass_subtitle_file(
            english_text, korean_text, duration, subtitle_path,
            english_font_size, korean_font_size, include_commentary, commentary_style
        )

# Singleton instances
ffmpeg_processor = FFmpegProcessor()
subtitle_processor = SubtitleProcessor()
media_extractor = MediaExtractor(ffmpeg_processor, subtitle_processor)